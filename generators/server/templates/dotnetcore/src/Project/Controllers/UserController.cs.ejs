<%#
 Copyright 2019-2021 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_ if (cqrsEnabled) { _%>
using MediatR;
<%_ } _%>
using AutoMapper;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using JHipsterNet.Core.Pagination;
using JHipsterNet.Core.Pagination.Extensions;
using <%= namespace %>.Domain;
using <%= namespace %>.Security;
using <%= namespace %>.Domain.Services.Interfaces;
using <%= namespace %>.Dto;
using <%= namespace %>.Web.Extensions;
using <%= namespace %>.Web.Filters;
using <%= namespace %>.Web.Rest.Problems;
using <%= namespace %>.Web.Rest.Utilities;
using <%= namespace %>.Crosscutting.Constants;
using <%= namespace %>.Crosscutting.Exceptions;
<%_ if (cqrsEnabled) { _%>
using <%= namespace %>.Application.Queries;
using <%= namespace %>.Application.Commands;
<%_ } _%>
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;

namespace <%= namespace %>.Controllers
{
    [Authorize]
    [Route("api")]
    [ApiController]
    public class UserController : ControllerBase
    {
        private readonly ILogger<UserController> _log;
        private readonly IMapper _mapper;
        <%_ if (cqrsEnabled) { _%>
        private readonly IMediator _mediator;
        <%_ } else { _%>       
        private readonly IMailService _mailService;
        private readonly UserManager<User> _userManager;
        private readonly IUserService _userService;
        <%_ } _%>

        <%_ if (cqrsEnabled) { _%>
        public UserController(ILogger<UserController> log, IMapper mapper, IMediator mediator)
        {
            _log = log;
            _mediator = mediator;        
            _mapper = mapper;
        }
        <%_ } else { _%>
        public UserController(ILogger<UserController> log, UserManager<User> userManager, IUserService userService,
            IMapper mapper, IMailService mailService)
        {
            _log = log;       
            _mediator = mediator;        
            _userManager = userManager;
            _userService = userService;
            _mailService = mailService;
            _mapper = mapper;
        }     
        <%_ } _%>        

        [HttpPost("users")]
        [ValidateModel]
        <%_ if (cqrsEnabled) { _%>
        public async Task<ActionResult<User>> CreateUser([FromBody] UserCreateCommand command)
        {
            _log.LogDebug($"REST request to save User : {command}");
            if (command.Id != null)
                throw new BadRequestAlertException("A new user cannot already have an ID", "userManagement",
                    "idexists");

            var newUser = await this._mediator.Send(command);

            return CreatedAtAction(nameof(GetUser), new { login = newUser.Login }, newUser)
                .WithHeaders(HeaderUtil.CreateEntityCreationAlert("userManagement.created", newUser.Login));
        }
        <%_ } else { _%>
        public async Task<ActionResult<User>> CreateUser([FromBody] UserDto userDto)
        {
            _log.LogDebug($"REST request to save User : {userDto}");
            if (userDto.Id != null)
                throw new BadRequestAlertException("A new user cannot already have an ID", "userManagement",
                    "idexists");
            // Lowercase the user login before comparing with database
            if (await _userManager.FindByNameAsync(userDto.Login.ToLowerInvariant()) != null)
                throw new LoginAlreadyUsedException();
            if (await _userManager.FindByEmailAsync(userDto.Email.ToLowerInvariant()) != null)
                throw new EmailAlreadyUsedException();

            var newUser = await _userService.CreateUser(_mapper.Map<User>(userDto));
            await _mailService.SendCreationEmail(newUser);
            return CreatedAtAction(nameof(GetUser), new { login = newUser.Login }, newUser)
                .WithHeaders(HeaderUtil.CreateEntityCreationAlert("userManagement.created", newUser.Login));
        }
        <%_ } _%>        

        [HttpPut("users")]
        [ValidateModel]
        <%_ if (cqrsEnabled) { _%>
        public async Task<IActionResult> UpdateUser([FromBody] UserUpdateCommand command)
        {
            _log.LogDebug($"REST request to update User : {command}");

            var updatedUser = await this._mediator.Send(command);        
            return ActionResultUtil.WrapOrNotFound(updatedUser)
                .WithHeaders(HeaderUtil.CreateAlert("userManagement.updated", command.Login));
        }
        <%_ } else { _%>
        public async Task<IActionResult> UpdateUser([FromBody] UserDto userDto)
        {
            _log.LogDebug($"REST request to update User : {userDto}");
            var existingUser = await _userManager.FindByEmailAsync(userDto.Email);
            if (existingUser != null && !existingUser.Id.Equals(userDto.Id)) throw new EmailAlreadyUsedException();
            existingUser = await _userManager.FindByNameAsync(userDto.Login);
            if (existingUser != null && !existingUser.Id.Equals(userDto.Id)) throw new LoginAlreadyUsedException();

            var updatedUser = await _userService.UpdateUser(_mapper.Map<User>(userDto));

            return ActionResultUtil.WrapOrNotFound(updatedUser)
                .WithHeaders(HeaderUtil.CreateAlert("userManagement.updated", userDto.Login));
        }
        <%_ } _%>

        [HttpGet("users")]
        <%_ if (cqrsEnabled) { _%>
        public async Task<ActionResult<IEnumerable<User>>> GetAllUsers(IPageable pageable)
        {           
            _log.LogDebug("REST request to get a page of Users");
            var page = await this._mediator.Send(new UserGetAllQuery { page = pageable });
            var userDtos = page.Content.Select(user => _mapper.Map<UserDto>(user));
            var headers = page.GeneratePaginationHttpHeaders();
            return Ok(userDtos).WithHeaders(headers);
        }
        <%_ } else { _%>
        public async Task<ActionResult<IEnumerable<User>>> GetAllUsers(IPageable pageable)
        {  
            _log.LogDebug("REST request to get a page of Users");
            var page = await _userManager.Users
                .Include(it => it.UserRoles)
                .ThenInclude(r => r.Role)
                .UsePageableAsync(pageable);
            var userDtos = page.Content.Select(user => _mapper.Map<UserDto>(user));
            var headers = page.GeneratePaginationHttpHeaders();
            return Ok(userDtos).WithHeaders(headers);
        }
        <%_ } _%>

        [HttpGet("users/authorities")]
        [Authorize(Roles = RolesConstants.ADMIN)]
        <%_ if (cqrsEnabled) { _%>
        public async Task<ActionResult<IEnumerable<string>>> GetAuthorities()
        {
            return Ok(await this._mediator.Send(new UserGetAuthoritiesQuery()));
        }
        <%_ } else { _%>
        public ActionResult<IEnumerable<string>> GetAuthorities()
        {
            return Ok(_userService.GetAuthorities());
        }
        <%_ } _%>

        [HttpGet("users/{login}")]
        <%_ if (cqrsEnabled) { _%>
        public async Task<IActionResult> GetUser([FromRoute] UserGetQuery query)
        {
            _log.LogDebug($"REST request to get User : {query.Login}");
            var userDto = await this._mediator.Send(query);
            return ActionResultUtil.WrapOrNotFound(userDto);
        }
        <%_ } else { _%>
        public async Task<IActionResult> GetUser([FromRoute] string login)
        {
            _log.LogDebug($"REST request to get User : {login}");
            var result = await _userManager.Users
                .Where(user => user.Login == login)
                .Include(it => it.UserRoles)
                .ThenInclude(r => r.Role)
                .SingleOrDefaultAsync();
            var userDto = _mapper.Map<UserDto>(result);
            return ActionResultUtil.WrapOrNotFound(userDto);
        }
        <%_ } _%>

        [HttpDelete("users/{login}")]
        [Authorize(Roles = RolesConstants.ADMIN)]
        <%_ if (cqrsEnabled) { _%>
        public async Task<IActionResult> DeleteUser([FromRoute] UserDeleteCommand command)
        {
            _log.LogDebug($"REST request to delete User : {command.Login}");
            await this._mediator.Send(command);
            return Ok().WithHeaders(HeaderUtil.CreateEntityDeletionAlert("userManagement.deleted", command.Login));
        }
        <%_ } else { _%>        
        public async Task<IActionResult> DeleteUser([FromRoute] string login)
        {
            _log.LogDebug($"REST request to delete User : {login}");
            await _userService.DeleteUser(login);
            return Ok().WithHeaders(HeaderUtil.CreateEntityDeletionAlert("userManagement.deleted", login));
        }
        <%_ } _%>
    }
}
