<%#
 Copyright 2019-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%
let hasDto = dto === 'mapstruct';
let hasService = service === 'serviceImpl';
%>
using MediatR;
using System.Threading;
using System.Collections.Generic;
using System.Threading.Tasks;
using JHipsterNet.Core.Pagination;
using <%= namespace %>.Domain;
<%_
let hasEnumField = false;
fields.forEach(field => {
        if (field.fieldIsEnum) {
            hasEnumField = true;
        }
    });
if (hasEnumField) { _%>
using <%= namespace %>.Crosscutting.Enums;
<%_ } _%>
using <%= namespace %>.Crosscutting.Exceptions;
<%_ if (hasDto) { _%>
using <%= namespace %>.Dto;
<%_ } _%>
using <%= namespace %>.Web.Extensions;
using <%= namespace %>.Web.Filters;
using <%= namespace %>.Web.Rest.Utilities;
using <%= namespace %>.Application.Queries;
using <%= namespace %>.Application.Commands;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;



namespace <%= namespace %>.Controllers
{
    [Authorize]
    [Route("api")]
    [ApiController]
    public class <%= pascalizedEntityClass %>Controller : ControllerBase
    {
        private const string EntityName = "<%= camelCasedEntityClass %>";
        private readonly ILogger<<%= pascalizedEntityClass %>Controller> _log;
        private readonly IMediator _mediator;

        public <%= pascalizedEntityClass %>Controller(ILogger<<%= pascalizedEntityClass %>Controller> log, IMediator mediator)
        {
            _log = log;
            _mediator = mediator;
        }

        [HttpPost("<%= kebabCasedEntityClassPlural %>")]
        [ValidateModel]
        public async Task<ActionResult<<%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %>>> Create<%= pascalizedEntityClass %>([FromBody] <%= pascalizedEntityClass %>CreateCommand command)
        {
            _log.LogDebug($"REST request to save <%= pascalizedEntityClass %> : {command}");
            if (command.Id != 0)
                throw new BadRequestAlertException("A new <%= camelCasedEntityClass %> cannot already have an ID", EntityName, "idexists");

            var <%= camelCasedEntityClass %> = await this._mediator.Send(command);       
            return CreatedAtAction(nameof(Get<%= pascalizedEntityClass %>), new { id = <%= camelCasedEntityClass %>.Id }, <%= camelCasedEntityClass %>)
                .WithHeaders(HeaderUtil.CreateEntityCreationAlert(EntityName, <%= camelCasedEntityClass %>.Id.ToString()));
        }

        [HttpPut("<%= kebabCasedEntityClassPlural %>")]
        [ValidateModel]
        public async Task<IActionResult> Update<%= pascalizedEntityClass %>([FromBody] <%= pascalizedEntityClass %>UpdateCommand command)
        {
            _log.LogDebug($"REST request to update <%= pascalizedEntityClass %> : {command}");
            if (command.Id == 0) 
                throw new BadRequestAlertException("Invalid Id", EntityName, "idnull");

            var <%= camelCasedEntityClass %> = await this._mediator.Send(command);
            return Ok(<%= camelCasedEntityClass %>)
                .WithHeaders(HeaderUtil.CreateEntityUpdateAlert(EntityName, <%= camelCasedEntityClass %>.Id.ToString()));
        }

        [HttpGet("<%= kebabCasedEntityClassPlural %>")]
        public async Task<ActionResult<IEnumerable<<%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %>>>> GetAll<%= pascalizedEntityClassPlural %>(IPageable page)
        {
            _log.LogDebug("REST request to get a page of <%= pascalizedEntityClassPlural %>");
            var result = await this._mediator.Send(new <%= pascalizedEntityClass %>GetAllQuery { page = page });
            <%_ if (hasDto) { _%>
            return Ok(((IPage<<%= asDto(pascalizedEntityClass) %>>)result).Content).WithHeaders(result.GeneratePaginationHttpHeaders());
            <%_ } else { _%>
            return Ok(result.Content).WithHeaders(result.GeneratePaginationHttpHeaders());
            <%_ } _%>
        }

        [HttpGet("<%= kebabCasedEntityClassPlural %>/{id}")]
        public async Task<IActionResult> Get<%= pascalizedEntityClass %>([FromRoute] <%= pascalizedEntityClass %>GetQuery query)
        {
            _log.LogDebug($"REST request to get <%= pascalizedEntityClass %> : {query.Id}");
            var result = await this._mediator.Send(query);
            return ActionResultUtil.WrapOrNotFound(result);
        }

        [HttpDelete("<%= kebabCasedEntityClassPlural %>/{id}")]
        public async Task<IActionResult> Delete<%= pascalizedEntityClass %>([FromRoute] <%= pascalizedEntityClass %>DeleteCommand command)
        {
            _log.LogDebug($"REST request to delete <%= pascalizedEntityClass %> : {command.Id}");
            await this._mediator.Send(command);
            return Ok().WithHeaders(HeaderUtil.CreateEntityDeletionAlert(EntityName, command.Id.ToString()));
        }
    }
}
